/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package colorchooser;
 
import java.awt.Color;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author evanp
 */
public class ValueLabels extends javax.swing.JPanel implements ColorListener{
    /**
     * Creates new form ValueLabels
     */
    public ValueLabels() {
        initComponents();
    }
    //ColorChooser setter to link instance of ColorChooser in JFrame to chooser variable below
    public void setColorChooser(ColorChooser chooser) {
        this.chooser = chooser;
    }
     private ColorChooser chooser;
    //Constructor, allows for JInputPanel to be instanced in JColorChooser
    //with argument of "chooser" instance name
     
public ValueLabels(ColorChooser chooser) {
    initComponents();
    this.chooser = chooser;
     // Add document listeners to the text fields
    txtRed.getDocument().addDocumentListener(new DocumentListener() {
        public void changedUpdate(DocumentEvent e) {
            textFieldChanged();
        }
        public void removeUpdate(DocumentEvent e) {
            textFieldChanged();
        }
        public void insertUpdate(DocumentEvent e) {
            textFieldChanged();
        }
    });
    txtGreen.getDocument().addDocumentListener(new DocumentListener() {
        public void changedUpdate(DocumentEvent e) {
            textFieldChanged();
        }
        public void removeUpdate(DocumentEvent e) {
            textFieldChanged();
        }
        public void insertUpdate(DocumentEvent e) {
            textFieldChanged();
        }
    });
     txtBlue.getDocument().addDocumentListener(new DocumentListener() {
        public void changedUpdate(DocumentEvent e) {
            textFieldChanged();
        }
        public void removeUpdate(DocumentEvent e) {
            textFieldChanged();
        }
        public void insertUpdate(DocumentEvent e) {
            textFieldChanged();
        }
    });
}
//textFieldChaged() method inside each document event 
private void textFieldChanged() {
    try {
        int r = Integer.parseInt(txtRed.getText());
        int g = Integer.parseInt(txtGreen.getText());
        int b = Integer.parseInt(txtBlue.getText());

        // Validate the values to be between 0 and 255
        r = Math.min(Math.max(r, 0), 255);
        g = Math.min(Math.max(g, 0), 255);
        b = Math.min(Math.max(b, 0), 255);

        // Update the sliders with the valid values using setter methods
        chooser.setRedValue(r);
        chooser.setGreenValue(g);
        chooser.setBlueValue(b);

        // Update the color panel
        Color color = new Color(r, g, b);
        chooser.fireColorEvent(new ColorEvent(chooser, color));
    } catch (NumberFormatException ex) {
        // Handle invalid input by setting the text fields to the current slider values
        txtRed.setText(String.valueOf(chooser.getRedValue()));
        txtGreen.setText(String.valueOf(chooser.getGreenValue()));
        txtBlue.setText(String.valueOf(chooser.getBlueValue()));
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtRed = new javax.swing.JTextField();
        txtGreen = new javax.swing.JTextField();
        txtBlue = new javax.swing.JTextField();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtRed)
                    .addComponent(txtGreen)
                    .addComponent(txtBlue, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(txtGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(txtBlue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField txtBlue;
    private javax.swing.JTextField txtGreen;
    private javax.swing.JTextField txtRed;
    // End of variables declaration//GEN-END:variables

    @Override
    public void changeColor(ColorEvent ce) {
// Update the text fields based on the color change event
        Color color = ce.getColor();
        txtRed.setText(String.valueOf(color.getRed()));
        txtGreen.setText(String.valueOf(color.getGreen()));
        txtBlue.setText(String.valueOf(color.getBlue()));
    }
}
