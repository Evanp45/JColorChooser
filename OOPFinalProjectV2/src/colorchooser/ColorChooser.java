/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package colorchooser;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.event.KeyListener;
import javax.swing.JOptionPane;

/**
 *
 * @author Evan
 */
public class ColorChooser extends javax.swing.JPanel implements ChangeListener, KeyListener, ColorListener {
    private ArrayList listeners;
    private int red = 0, green = 0, blue = 0;
    private Color currentColor;
    //collection of type array list, keeps track of listeners

    /**
     * Creates new form ColorChooser
     */
    public ColorChooser() {
        initComponents();
        sldRed.addChangeListener(this);
        sldGreen.addChangeListener(this);
        sldBlue.addChangeListener(this);
        listeners = new ArrayList();
        //Keystroke listeners for each text field
        txtRed.addKeyListener(this);
        txtGreen.addKeyListener(this);
        txtBlue.addKeyListener(this);
        currentColor = new Color(0, 0, 0);
    }
    
    public int getRed(){
        return red;
    }
    
      public int getGreen(){
        return green;
    }
      
       public int getBlue(){
        return blue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtRed = new javax.swing.JTextField();
        sldRed = new javax.swing.JSlider();
        txtGreen = new javax.swing.JTextField();
        sldGreen = new javax.swing.JSlider();
        txtBlue = new javax.swing.JTextField();
        sldBlue = new javax.swing.JSlider();

        txtRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRedActionPerformed(evt);
            }
        });

        sldRed.setMajorTickSpacing(50);
        sldRed.setMaximum(255);
        sldRed.setMinorTickSpacing(10);
        sldRed.setPaintLabels(true);
        sldRed.setPaintTicks(true);
        sldRed.setValue(0);

        txtGreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGreenActionPerformed(evt);
            }
        });

        sldGreen.setMajorTickSpacing(50);
        sldGreen.setMaximum(255);
        sldGreen.setMinorTickSpacing(10);
        sldGreen.setPaintLabels(true);
        sldGreen.setPaintTicks(true);
        sldGreen.setValue(0);
        sldGreen.setMaximumSize(new java.awt.Dimension(30000, 44));

        sldBlue.setMajorTickSpacing(50);
        sldBlue.setMaximum(255);
        sldBlue.setMinorTickSpacing(10);
        sldBlue.setPaintLabels(true);
        sldBlue.setPaintTicks(true);
        sldBlue.setValue(0);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtGreen, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(txtRed)
                    .addComponent(txtBlue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sldBlue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(sldGreen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sldRed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sldRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sldGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sldBlue, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBlue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtGreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGreenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGreenActionPerformed

    private void txtRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRedActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider sldBlue;
    private javax.swing.JSlider sldGreen;
    private javax.swing.JSlider sldRed;
    private javax.swing.JTextField txtBlue;
    private javax.swing.JTextField txtGreen;
    private javax.swing.JTextField txtRed;
    // End of variables declaration//GEN-END:variables

    @Override
    public void stateChanged(ChangeEvent e) {
        red = sldRed.getValue();
        green = sldGreen.getValue();
        blue = sldBlue.getValue();
        Color color = new Color(red,green,blue);
        fireColorEvent(new ColorEvent(this,color));
        currentColor = new Color(red, green, blue);
    }
    
    public void fireColorEvent(ColorEvent ce){
        ArrayList copy;
        synchronized(listeners){
            copy = (ArrayList)listeners.clone();
        }
        int size = copy.size();
        for(int i=0; i<size; i++){
            ColorListener colorListener = (ColorListener)copy.get(i);
            colorListener.changeColor(ce);
        }
    }
    
    public void addColorListener(ColorListener colorListener){
        listeners.add(colorListener);
    }
    
    public void removeColorListener(ColorListener colorListener){
        listeners.remove(colorListener);
    }
//Text field listener methods, only on released key 
    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }
    //Method to handle text field changing sliders
    @Override
    public void keyReleased(KeyEvent e) {
        try {
            red = Integer.parseInt(txtRed.getText());
            green = Integer.parseInt(txtGreen.getText());
            blue = Integer.parseInt(txtBlue.getText());
            if (red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255) {
                throw new NumberFormatException();
            }
            Color color = new Color(red, green, blue);
            fireColorEvent(new ColorEvent(this, color));
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid number.");
        }        
    }

    @Override
    public void changeColor(ColorEvent ce) {
        Color color = ce.getColor();
        sldRed.setValue(color.getRed());
        sldGreen.setValue(color.getGreen());
        sldBlue.setValue(color.getBlue());
        txtRed.setText("" + color.getRed());
        txtGreen.setText("" + color.getGreen());
        txtBlue.setText("" + color.getBlue());    }
}
